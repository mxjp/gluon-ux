@use "sass:map";

@mixin set-theme-vars($defs, $target) {
	@each $name, $targets in $defs {
		@if map.has-key($targets, $target) {
			--#{$name}: #{map.get($targets, $target)};
		}
	}
}

@mixin theme($defs) {
	:root {
		@include set-theme-vars($defs, light);
		@media (prefers-color-scheme: dark) {
			@include set-theme-vars($defs, dark);
			color-scheme: dark;
		}

		@media (prefers-contrast: more) {
			@include set-theme-vars($defs, light-hc);
			@media (prefers-color-scheme: dark) {
				@include set-theme-vars($defs, dark-hc);
			}
		}
	}
}

@mixin define-quad($name, $block-start, $inline-start: $block-start, $block-end: $block-start, $inline-end: $inline-start) {
	--#{$name}-block-start: #{$block-start};
	--#{$name}-inline-start: #{$inline-start};
	--#{$name}-block-end: #{$block-end};
	--#{$name}-inline-end: #{$inline-end};
}

@mixin padding($name, $subtract: null) {
	@if $subtract {
		padding-block:
			calc(var(--#{$name}-block-start) - $subtract)
			calc(var(--#{$name}-block-end) - $subtract);
		padding-inline:
			calc(var(--#{$name}-inline-start) - $subtract)
			calc(var(--#{$name}-inline-end) - $subtract);
	} @else {
		padding-block:
			var(--#{$name}-block-start)
			var(--#{$name}-block-end);
		padding-inline:
			var(--#{$name}-inline-start)
			var(--#{$name}-inline-end);
	}
}
